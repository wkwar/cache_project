这个项目是实现分布式缓存
1.缓存管理 ---》使用缓存淘汰算法 RLU(Least Recently Used)
存储方式为 key--value
原理：淘汰使用频率少的

2.一致性哈希表
解决服务器节点 与 数据的匹配问题
首先求出服务器(节点)的哈希值，并分配到0~2^32的圆上
然后根据存储数据的key,求出对应的哈希值，映射到圆上
存储数据匹配服务器，顺时针查找到的第一台服务器

--- 如果服务器节点太少的话，任意节点分布不均造成数据倾斜
===》引入了虚拟节点机制
即每个服务节点计算多个哈希，每个位置都放置一个服务节点

项目架构
1.节点管理
多节点存储(k-v cache),当存储多个节点时，使用consistent hash表的方式管理多个节点。
2.group(存储组)
相对独立的存储容器，每个group都有自己的名字，多个group之间不共享数据。
3.缓存系统 -- LRU
4.并发查询优化
在goroutine中，当某个节点收到N个对同一key的查询，只执行其中一个请求，其他请求堵塞。
5.热门缓存自动镜像
每个节点都包含两类缓存：main cache(属于本节点的数据)
hot cache(不属于本节点，但是全局热门的数据)

--流程： 当节点收到key的查询请求，它首先检查本地hot cache中有没有，如果没有就看key是否属于
本地节点的数据，如果不是的话就向兄弟节点请求。
--自动镜像：指的是从兄弟节点处返回的数据可以缓存在本节点的hot cache里，虽然自身没有那个数据的存储权限，
但是可以存储成一份热门数据的镜像，以后再收到对该 key 的请求，无需再向兄弟节点请求，浪费网络资源。


protobuf 即 Protocol Buffers，是一种轻便高效的结构化数据存储格式，与语言、平台无关，可扩展可序列化。
protobuf 性能和效率大幅度优于 JSON、XML 等其他的结构化数据格式。protobuf 是以二进制方式存储的，占用空间小，但也带来了可读性差的缺点。
protobuf 在通信协议和数据存储等领域应用广泛。
例如著名的分布式缓存工具 Memcached 的 Go 语言版本groupcache 就使用了 protobuf 作为其 RPC 数据格式

