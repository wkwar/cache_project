// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupcacheClient is the client API for Groupcache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupcacheClient interface {
	Get(ctx context.Context, in *Requst, opts ...grpc.CallOption) (*ResponseForGet, error)
	Delete(ctx context.Context, in *Requst, opts ...grpc.CallOption) (*ResponseForDelete, error)
}

type groupcacheClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupcacheClient(cc grpc.ClientConnInterface) GroupcacheClient {
	return &groupcacheClient{cc}
}

func (c *groupcacheClient) Get(ctx context.Context, in *Requst, opts ...grpc.CallOption) (*ResponseForGet, error) {
	out := new(ResponseForGet)
	err := c.cc.Invoke(ctx, "/pb.Groupcache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupcacheClient) Delete(ctx context.Context, in *Requst, opts ...grpc.CallOption) (*ResponseForDelete, error) {
	out := new(ResponseForDelete)
	err := c.cc.Invoke(ctx, "/pb.Groupcache/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupcacheServer is the server API for Groupcache service.
// All implementations must embed UnimplementedGroupcacheServer
// for forward compatibility
type GroupcacheServer interface {
	Get(context.Context, *Requst) (*ResponseForGet, error)
	Delete(context.Context, *Requst) (*ResponseForDelete, error)
	mustEmbedUnimplementedGroupcacheServer()
}

// UnimplementedGroupcacheServer must be embedded to have forward compatible implementations.
type UnimplementedGroupcacheServer struct {
}

func (UnimplementedGroupcacheServer) Get(context.Context, *Requst) (*ResponseForGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupcacheServer) Delete(context.Context, *Requst) (*ResponseForDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupcacheServer) mustEmbedUnimplementedGroupcacheServer() {}

// UnsafeGroupcacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupcacheServer will
// result in compilation errors.
type UnsafeGroupcacheServer interface {
	mustEmbedUnimplementedGroupcacheServer()
}

func RegisterGroupcacheServer(s grpc.ServiceRegistrar, srv GroupcacheServer) {
	s.RegisterService(&Groupcache_ServiceDesc, srv)
}

func _Groupcache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupcacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Groupcache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupcacheServer).Get(ctx, req.(*Requst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groupcache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupcacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Groupcache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupcacheServer).Delete(ctx, req.(*Requst))
	}
	return interceptor(ctx, in, info, handler)
}

// Groupcache_ServiceDesc is the grpc.ServiceDesc for Groupcache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Groupcache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Groupcache",
	HandlerType: (*GroupcacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Groupcache_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Groupcache_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groupcache.proto",
}
